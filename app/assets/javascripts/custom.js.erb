var templates = {};
var mapDisplay;
var train_id = 4; 

// helper methods
function computeLatitude(port) {
	return (parseFloat(port.lat_deg) + parseFloat(port.lat_min)/60 + parseFloat(port.lat_sec)/3600);
}

function computeLongitude(port) {
	return (parseFloat(port.lon_deg) + parseFloat(port.lon_min)/60 + parseFloat(port.lon_sec)/3600);
}

function getLatLng(port) {
	var lat = computeLatitude(port);
	var lon = computeLongitude(port);
	var latlng = new google.maps.LatLng(lat, lon);
	return latlng;
}

function compileTemplates() {
	Handlebars.registerHelper('breaklines', function(text) {
	    text = Handlebars.Utils.escapeExpression(text);
	    text = text.replace(/(\r\n|\n|\r)/gm, '<br>');
	    return new Handlebars.SafeString(text);
	});

	Handlebars.registerHelper('format_time', function(text) {
	    return text.substring(text.indexOf("T") + 1, text.indexOf("T") + 9);
	});

	Handlebars.registerHelper('get_days', function(days) {
			if(days == 127)
				return "Daily";
			var str = "";
			if (((1<<6) & days) > 0)
				str += "Mo | ";
			if (((1<<5) & days) > 0)
				str += "Tu | ";
			if (((1<<4) & days) > 0)
				str += "We | ";
			if (((1<<3) & days) > 0)
				str += "Th | ";
			if (((1<<2) & days) > 0)
				str += "Fr | ";
			if (((1<<1) & days) > 0)
				str += "Sa | ";
			if (((1<<0) & days) > 0)
				str += "Su | ";

			if(str.length > 0)
				return str.substring(0, str.length - 3);
	});

	var source   = $("#carousel-inner-template").html();
	templates["carousel-inner"] = Handlebars.compile(source);

	source   = $("#additional-info-template").html();
	templates["additional-info"] = Handlebars.compile(source);

	source   = $("#info-window-template").html();
	templates["info-window"] = Handlebars.compile(source);

	source   = $("#routes-info-template").html();
	templates["routes-info"] = Handlebars.compile(source);

	source   = $("#routes-options-template").html();
	templates["routes-options"] = Handlebars.compile(source);

	source   = $("#no-routes-template").html();
	templates["no-routes"] = Handlebars.compile(source);
}

// mapUI
var MapUI = (function() {
	function MapUI(ports, images, infos) {
		this.ports = ports;
		this.images = images;
		this.infos = infos;
		this.activePort = null;
		this.uiView = "details";
		this.mapDisplay = null;
		this.mapState = "none";
		this.currentRouteList = null;
		this.activeRoute = -1;
		this.visualizations = null;

		this.originPort = null;
		this.destinationPort = null;
		$("#view-routes").click((function(_this) {
			return function(e) {
				_this.setOriginPort(null);
				_this.setDestinationPort(_this.activePort);
				_this.switchView();
				_this.mapState = "origin";
			}
		})(this));

		$("#origin-text").click((function(_this) {
			return function(e) {
				this.select();
				_this.mapState = "origin";
			}
		})(this));

		$("#destination-text").click((function(_this) {
			return function(e) {
				this.select();
				_this.mapState = "destination";
			}
		})(this));
	}

	MapUI.prototype.setOriginPort = function(origin) {
		this.originPort = origin;
		if(origin == null)
			$("#origin-text").val("");
		else
			$("#origin-text").val(this.originPort.name);
		if(origin != null)
			this.setActivePort(origin.id);

		$("#routes-options-container").slideUp(400, function(c) {
			$("#routes-options .scroll-container").html("");
		});

		this.getRoute();
	}

	MapUI.prototype.setDestinationPort = function(destination) {
		this.destinationPort = destination;
		if(destination == null)
			$("#destination-text").val("");
		else
			$("#destination-text").val(this.destinationPort.name);
		if(destination != null)
			this.setActivePort(destination.id);

		$("#routes-options-container").slideUp(400, function(c) {
			$("#routes-options .scroll-container").html("");
		});

		this.getRoute();
	}

	MapUI.prototype.getRoute = function() {
		if(this.destinationPort == null || this.originPort == null) {
			$("#routes-container").slideUp();
			return;
		}

		$.ajax({
      type: "POST",
      url: get_routes,
      data: { origin_id: this.originPort.id, destination_id: this.destinationPort.id },
      success: (function(_this){
				return function(data) {
	        console.log(data);
	        _this.currentRouteList = data.data;
	        _this.showRoute(data.data);
					// _this.mapDisplay.showRoute(data.data.routeList[0]);
	        return false;
	      }
			})(this),
      error: function(data) {
      	return false;
      }
    })

		// this.showRoute(routeData);
		// this.mapDisplay.showRoute(routeData);
	}

	MapUI.prototype.showRoute = function(data) {
		$("#routes-container").slideDown();
		$("#routes-info > .scroll-container").html("");
		this.activeRoute = -1;

	  var string = templates["routes-info"](data);
	  $("#routes-info > .scroll-container").html(string);

	  this.visualizations = {};
		for(var i = 0; i < data.routeList.length; i++) {
			this.visualizations[data.routeList[i].id] = this.createRouteVisualization("#route-"+ data.routeList[i].id +" .route-visualization", data.routeList[i]);
		}

	  $(".route-info").click((function(_this) {
	  	return function(e) {
	  		if(_this.activeRoute == $(this).data("rid")) {
	  			return;
	  		}

	  		_this.activeRoute = $(this).data("rid");
	  		_this.mapDisplay.showRoute(_this.currentRouteList.routeList[$(this).data("id")]);

	  		for(var i = 0; i < _this.currentRouteList.routeList.length; i++) {
					if(_this.currentRouteList.routeList[i].id == $(this).data("rid")) {
						$("#route-"+_this.currentRouteList.routeList[i].id).slideDown();
					}
					else {
						$("#route-"+_this.currentRouteList.routeList[i].id).slideUp();
					}
				}
	  		// _this.showRouteOptions($(this).data("rid"), 0);

				// var lines = _this.visualizations[$(this).data("rid")].lines;

				// lines.each(function(d, i) {
				// 	if(i == 0) {
				// 		d.active = true;
				// 		$(this).attr("stroke", "#F16521");
				// 	}
				// 	else {
				// 		d.active = false;
				// 		$(this).attr("stroke", "#444444");
				// 	}
				// })
			}
	  })(this));

		if(data.routeList.length == 0) {
			string = templates["no-routes"](data);
	  	$("#routes-info > .scroll-container").html(string);
		}

		// this.createRouteVisualization("#route-1 .route-visualization", [this.ports[115], this.ports[142]]);
		// this.createRouteVisualization("#route-2 .route-visualization", [this.ports[115], this.ports[174], this.ports[142]]);
		// this.mapDisplay.showRoute([this.ports[115], this.ports[174], this.ports[142]]);
	}

	MapUI.prototype.showRouteOptions = function(routeListId, routeIndex) {
		for(var i = 0; i < this.currentRouteList.routeList.length; i++) {
			console.log(this.currentRouteList.routeList[i].id)
			if(this.currentRouteList.routeList[i].id == routeListId) {
				// $("#route-options").remove();
				// $("#route-"+routeListId).after("<div id=\"route-options\"></div>");
				
				var tempData = {}
				tempData.routeList = this.currentRouteList.routeList[i].routes[routeIndex];

				var string = templates["routes-options"](tempData);
				// string = "<div class=\"panel-sub\"><div class=\"bold\">Options</div>" + string +"</div>"; 
				// $("#route-options").html(string);


				$("#routes-options .scroll-container").html(string);
				$("#routes-options-container").slideDown();
			}
			else {
				$("#route-"+this.currentRouteList.routeList[i].id).slideUp();
			}
		}
	}

	MapUI.prototype.showAllRoutes = function() {
		for(var i = 0; i < this.currentRouteList.routeList.length; i++) {
			$("#route-"+this.currentRouteList.routeList[i].id).slideDown();

			this.visualizations[this.currentRouteList.routeList[i].id].lines
				.each(function(d, i) {
					d.active = false;
					$(this).attr("stroke", "#444444");
				})
		}

	}

	MapUI.prototype.setMapDisplay = function(mapDisplay) {
		this.mapDisplay = mapDisplay;
	}

	MapUI.prototype.setActivePort = function(id) {
		var index = this.getPortIndexViaId(id);
		var port = this.ports[index];
		var imageList = this.images[index];
		var infoList = this.infos[index];

		this.activePort = port;

		$("#init-instructions").hide();

		if($("#panel-title").html() == "Instructions") 
			$("#panel-title").html("Details");

	  // $("#panel-title").html(port.name);
	  $("#name-container .bold").html(port.name);
	  $("#name-container #description.small-desc").html(port.description.replace(/(?:\r\n|\r|\n)/g, '<br />'));

	  // if(port.category_id == 2)
	  	$("#view-routes").show();
	  // else
	  // 	$("#view-routes").hide();
	  
	  // prep image carousel
	  if(imageList.length > 0) {
	  	var data = {};
	  	data.imageList = imageList;

	  	var string = templates["carousel-inner"](data);
	  	$("#images-container .carousel-inner").html(string);

	  	$("#images-container").slideDown(400);
	  	$(".navigation").each(function() {
				$(this).fadeIn(400);
			});

			
			$('#images-container').carousel();

			$(".item.port-image img").each(function(e) {
				var parent = $(this).parent();
				$("<img/>")
			    .attr("src", $(this).attr("src"))
			    .load((function(_this) {
			    	return function() {
			        var pic_real_width = this.width; 
			        var pic_real_height = this.height;
			        if(pic_real_width/parent.width() > pic_real_height/parent.height()) {
				        $(_this).css("max-height", "100%")
				        $(_this).css("max-width", "none")
			        }
				    }
			    })(this));

			});
	  }
	  else {
	  	$(".navigation").each(function() {
				$(this).fadeOut(400);
			})
	  	$("#images-container").slideUp(400);
	  	$("#images-container .carousel-inner").html();
	  }

	  // prep additional info box
	  if(infoList.length > 0) {
	  	var data = {};
	  	data.infoList = infoList;

	  	var string = templates["additional-info"](data);
	  	$("#info-container .scroll-container").html(string);

	  	$("#info-container").slideDown(400);
	  }
	  else {
	  	$("#info-container").slideUp(400);
	  	$("#info-container .scroll-container").html("");
	  }
	}

	MapUI.prototype.getPortIndexViaId = function(id) {
		for(var i = 0; i < this.ports.length; i++) {
			if(this.ports[i].id == id) {
				return i;
			}
		}
	}

	MapUI.prototype.getPortViaId = function(id) {
		for(var i = 0; i < this.ports.length; i++) {
			if(this.ports[i].id == id) {
				return this.ports[i];
			}
		}
	}

	MapUI.prototype.switchView = function(spec) {
		$("#init-instructions").hide();
		if(spec == null) {
			if(this.uiView == "flights") {
				$("#port-details").slideDown();
				$("#routes-display").slideUp(400, function(d) {
					$("#routes-info .scroll-container").html("");
				});
				$("#routes-options-container").slideUp(400, function(c) {
					$("#routes-options .scroll-container").html("");
				});
				$("#panel-title").html("Details");
				this.mapState = "none";
				this.mapDisplay.removePath();
				this.uiView = "details";
			}
			else {
				$("#routes-display").slideDown();
				$("#port-details").slideUp();
				$("#panel-title").html("Routes <span class=\"glyphicon glyphicon-remove\" style=\"padding-top:2px;float:right;\" aria-hidden=\"true\"></span>");
				this.uiView = "flights";
			}
		}
		else {
			if(spec != this.uiView) {
				this.switchView();
			}
		}
	}

	MapUI.prototype.createRouteVisualization = function(selector, data) {
		// console.log(data);
		var div = $(selector);
		d3.select(selector).selectAll("*").remove();

		var width = div.width(),
			height = div.height();

		var vis = d3.select(selector)
				.append("svg")
				.attr("width", width)
				.attr("height", height)
				.attr("id", "svg_vis");

		// console.log(data);

		portPath = data.portPath

		// console.log(circles);
		var padding = 10;
		var interval = (width-padding*2)/(portPath.length-1);

		var lines = vis.selectAll("line")
			.data(data.routes);

		for(var i = 0; i < data.routes.length; i++) {
			data.routes[i].active = false;
		}

		var normalColor = "#444444";
		var highlightColor = "#F16521";

		lines
			.enter()
			.append("line")
			.attr("x1", function(d, i) {
				return padding + i*interval;
			})
			.attr("y1", height/2)
			.attr("x2", function(d, i) {
				return padding + (i+1)*interval;
			})
			.attr("y2", height/2)
			.attr("stroke-width", 4)
			.attr("stroke", function(d, i) {
				if(d.active == true)
					return highlightColor;
				return normalColor;
			})
			.on("click", (function(_this) {
				return function(d, i) {
					_this.showRouteOptions(data.id, i);

					lines.each(function(d) {
						d.active = false;
						$(this).attr("stroke", normalColor);
					})

					if(d.active == false) {
						$(this).attr("stroke", highlightColor);
						d.active = true;
					}
				}
			})(this))
			.on("mouseover", function(d, i) {
				if(d.active == false)
					$(this).attr("stroke", highlightColor);
			})
			.on("mouseout", function(d, i) {
				if(d.active == false)
					$(this).attr("stroke", normalColor);
			})

		var circles = vis.selectAll("circle")
			.data(portPath, function(d) {
					return d.id;
				});

		var tip = d3.tip()
		  .offset([-10, 0])
		  .html(function(d) {
		  	// trafficValue *= trafficValue;
		  	// Math.sqrt(((data[i][j]/2 * 25  ) + 5) / Math.PI ) * 7
		    return "<span>" + d.name + "</span>";
			})
			.attr("class", "d3-tip");

		circles
			.enter()
			.append("circle")
			.attr("r", 6)
			.attr("fill", function(d, i) {
					if (i == portPath.length-1)
						return normalColor;
					else
						return "#FFFFFF";
				})
			.attr("stroke-width", 4)
			.attr("stroke", normalColor)
			.attr("class", "airport-circle")
			.attr("cx", function(d, i) {
				return padding + i*interval;
			})
			.attr("cy", function(d, i) {
				return height/2;
			})
			.on('mouseover', (function(_this){
				return function(d, i) {
					tip.attr("class", "d3-tip");
					tip.show(d);
					$(this).attr("fill", "#F16521");
				}
			})(this))
	    .on('mouseout', (function(_this){
				return function(d, i) {
					tip.hide(d);
					if (i == portPath.length-1)
						$(this).attr("fill", normalColor);
					else
						$(this).attr("fill", "#FFFFFF");
				}
			})(this))
			.on('click', (function(_this) {
				return function(d) {
					var id = d.id;
					_this.mapDisplay.panToMarker(id);
					var port = _this.getPortViaId(id);
					console.log(port.category_id);
				}
			})(this))

		vis.call(tip);

		return {"lines":lines, "circles":circles};
	}

	return MapUI;
})();


// map display
var MapDisplay = (function() {
	function MapDisplay(ports, mapUI) {
		this.ports = ports;
		this.mapUI = mapUI;
		this.currentPath = null;
		this.trains = [];
		var pts = [];
		pts.push(convert(14,39,26.94,121,1,16.28));
        pts.push(convert(14,39,27.42,121,1,12.93));
        pts.push(convert(14,39,27.44,121,1,12.70));
        pts.push(convert(14,39,27.45,121,1,12.46));
        pts.push(convert(14,39,27.45,121,1,12.23));
        pts.push(convert(14,39,27.45,121,1,11.94));
        pts.push(convert(14,39,27.46,121,1,11.33));
        pts.push(convert(14,39,27.42,121,1,8.32));
        pts.push(convert(14,39,27.33,121,1,3.06));
        pts.push(convert(14,39,27.23,121,0,55.60));
        pts.push(convert(14,39,27.15,121,0,50.96));
        pts.push(convert(14,39,27.09,121,0,47.12));
        pts.push(convert(14,39,27.04,121,0,42.99));
        pts.push(convert(14,39,26.94,121,0,36.85));
        pts.push(convert(14,39,26.84,121,0,30.05));
        pts.push(convert(14,39,26.83,121,0,29.71));
        pts.push(convert(14,39,26.84,121,0,29.36));
        pts.push(convert(14,39,26.78,121,0,24.45));
        pts.push(convert(14,39,26.65,121,0,18.79));
        pts.push(convert(14,39,26.68,121,0,13.23));
        pts.push(convert(14,39,26.52,121,0,8.02));
        pts.push(convert(14,39,26.43,121,0,2.79));
        pts.push(convert(14,39,26.36,120,59,57.86));
        pts.push(convert(14,39,26.28,120,59,52.14));
        pts.push(convert(14,39,26.17,120,59,44.67));
        pts.push(convert(14,39,26.06,120,59,37.62));
        pts.push(convert(14,39,25.93,120,59,28.89));
        pts.push(convert(14,39,25.82,120,59,20.79));
        pts.push(convert(14,39,25.67,120,59,10.68));
        pts.push(convert(14,39,25.59,120,59,6.97));
        pts.push(convert(14,39,25.58,120,59,6.68));
        pts.push(convert(14,39,25.57,120,59,6.48));
        pts.push(convert(14,39,25.54,120,59,6.30));
        pts.push(convert(14,39,25.51,120,59,6.06));
        pts.push(convert(14,39,25.48,120,59,5.84));
        pts.push(convert(14,39,25.45,120,59,5.67));
        pts.push(convert(14,39,25.40,120,59,5.42));
        pts.push(convert(14,39,25.32,120,59,5.17));
        pts.push(convert(14,39,25.25,120,59,4.98));
        pts.push(convert(14,39,25.17,120,59,4.74));
        pts.push(convert(14,39,25.08,120,59,4.51));
        pts.push(convert(14,39,24.98,120,59,4.30));
        pts.push(convert(14,39,24.88,120,59,4.14));
        pts.push(convert(14,39,24.77,120,59,3.94));
        pts.push(convert(14,39,24.64,120,59,3.77));
        pts.push(convert(14,39,24.49,120,59,3.56));
        pts.push(convert(14,39,24.31,120,59,3.36));
        pts.push(convert(14,39,24.14,120,59,3.20));
        pts.push(convert(14,39,23.97,120,59,3.05));
        pts.push(convert(14,39,23.80,120,59,2.93));
        pts.push(convert(14,39,23.60,120,59,2.81));
        pts.push(convert(14,39,23.39,120,59,2.70));
        pts.push(convert(14,39,23.21,120,59,2.61));
        pts.push(convert(14,39,23.01,120,59,2.53));
        pts.push(convert(14,39,22.80,120,59,2.46));
        pts.push(convert(14,39,22.58,120,59,2.40));
        pts.push(convert(14,39,22.28,120,59,2.34));
        pts.push(convert(14,39,21.98,120,59,2.30));
        pts.push(convert(14,39,21.65,120,59,2.27));
        pts.push(convert(14,39,21.26,120,59,2.26));
        pts.push(convert(14,39,17.74,120,59,2.11));
        pts.push(convert(14,39,15.60,120,59,2.06));
        pts.push(convert(14,39,10.81,120,59,1.88));
        pts.push(convert(14,39,5.18,120,59,1.67));
        pts.push(convert(14,38,58.86,120,59,1.46));
        pts.push(convert(14,38,51.39,120,59,1.22));
        pts.push(convert(14,38,42.77,120,59,0.94));
        pts.push(convert(14,38,39.54,120,59,0.85));
        pts.push(convert(14,38,35.98,120,59,0.74));
        pts.push(convert(14,38,30.02,120,59,0.54));
        pts.push(convert(14,38,23.99,120,59,0.37));
        pts.push(convert(14,38,19.96,120,59,0.20));
        pts.push(convert(14,38,19.57,120,59,0.17));
        pts.push(convert(14,38,19.18,120,59,0.12));
        pts.push(convert(14,38,18.83,120,59,0.07));
        pts.push(convert(14,38,18.43,120,59,0.00));
        pts.push(convert(14,38,17.98,120,58,59.91));
        pts.push(convert(14,38,17.47,120,58,59.78));
        pts.push(convert(14,38,16.93,120,58,59.62));
        pts.push(convert(14,38,16.40,120,58,59.44));
        pts.push(convert(14,38,15.93,120,58,59.26));
        pts.push(convert(14,38,15.40,120,58,59.03));
        pts.push(convert(14,38,14.69,120,58,58.70));
        pts.push(convert(14,38,11.37,120,58,57.21));
        pts.push(convert(14,38,9.40,120,58,56.26));
        pts.push(convert(14,38,6.27,120,58,54.74));
        pts.push(convert(14,38,2.59,120,58,52.99));
        pts.push(convert(14,37,58.84,120,58,51.25));
        pts.push(convert(14,37,58.02,120,58,50.89));
        pts.push(convert(14,37,57.74,120,58,50.79));
        pts.push(convert(14,37,57.46,120,58,50.69));
        pts.push(convert(14,37,57.19,120,58,50.62));
        pts.push(convert(14,37,56.95,120,58,50.57));
        pts.push(convert(14,37,56.73,120,58,50.53));
        pts.push(convert(14,37,56.44,120,58,50.49));
        pts.push(convert(14,37,56.19,120,58,50.46));
        pts.push(convert(14,37,55.93,120,58,50.44));
        pts.push(convert(14,37,55.61,120,58,50.44));
        pts.push(convert(14,37,55.30,120,58,50.45));
        pts.push(convert(14,37,55.02,120,58,50.46));
        pts.push(convert(14,37,54.70,120,58,50.50));
        pts.push(convert(14,37,54.33,120,58,50.56));
        pts.push(convert(14,37,54.00,120,58,50.64));
        pts.push(convert(14,37,53.71,120,58,50.72));
        pts.push(convert(14,37,53.45,120,58,50.81));
        pts.push(convert(14,37,53.17,120,58,50.92));
        pts.push(convert(14,37,52.84,120,58,51.06));
        pts.push(convert(14,37,52.58,120,58,51.19));
        pts.push(convert(14,37,52.36,120,58,51.31));
        pts.push(convert(14,37,52.14,120,58,51.45));
        pts.push(convert(14,37,51.94,120,58,51.58));
        pts.push(convert(14,37,51.69,120,58,51.74));
        pts.push(convert(14,37,50.31,120,58,53.03));
        pts.push(convert(14,37,48.83,120,58,54.34));
        pts.push(convert(14,37,46.14,120,58,56.87));
        pts.push(convert(14,37,45.44,120,58,57.49));
        pts.push(convert(14,37,45.18,120,58,57.70));
        pts.push(convert(14,37,44.99,120,58,57.84));
        pts.push(convert(14,37,44.82,120,58,57.96));
        pts.push(convert(14,37,44.64,120,58,58.08));
        pts.push(convert(14,37,44.46,120,58,58.20));
        pts.push(convert(14,37,44.27,120,58,58.30));
        pts.push(convert(14,37,44.10,120,58,58.39));
        pts.push(convert(14,37,43.90,120,58,58.48));
        pts.push(convert(14,37,43.72,120,58,58.56));
        pts.push(convert(14,37,43.52,120,58,58.64));
        pts.push(convert(14,37,43.31,120,58,58.71));
        pts.push(convert(14,37,43.11,120,58,58.79));
        pts.push(convert(14,37,42.88,120,58,58.85));
        pts.push(convert(14,37,42.63,120,58,58.92));
        pts.push(convert(14,37,42.42,120,58,58.96));
        pts.push(convert(14,37,42.13,120,58,59.01));
        pts.push(convert(14,37,41.79,120,58,59.05));
        pts.push(convert(14,37,41.49,120,58,59.06));
        pts.push(convert(14,37,38.34,120,58,59.00));
        pts.push(convert(14,37,34.51,120,58,58.87));
        pts.push(convert(14,37,30.79,120,58,58.76));
        pts.push(convert(14,37,27.03,120,58,58.64));
        pts.push(convert(14,37,23.71,120,58,58.55));
        pts.push(convert(14,37,21.39,120,58,58.49));
        pts.push(convert(14,37,17.29,120,58,58.34));
        pts.push(convert(14,37,13.52,120,58,58.24));
        pts.push(convert(14,37,9.71,120,58,58.15));
        pts.push(convert(14,37,6.00,120,58,58.09));
        pts.push(convert(14,37,2.22,120,58,57.95));
        pts.push(convert(14,36,59.89,120,58,57.90));
        pts.push(convert(14,36,56.08,120,58,57.76));
        pts.push(convert(14,36,52.39,120,58,57.66));
        pts.push(convert(14,36,48.70,120,58,57.55));
        pts.push(convert(14,36,45.47,120,58,57.38));
        pts.push(convert(14,36,41.79,120,58,57.08));
        pts.push(convert(14,36,40.47,120,58,56.99));
        pts.push(convert(14,36,36.62,120,58,56.70));
        pts.push(convert(14,36,33.13,120,58,56.42));
        pts.push(convert(14,36,29.58,120,58,56.16));
        pts.push(convert(14,36,25.90,120,58,55.87));
        pts.push(convert(14,36,22.39,120,58,55.59));
        pts.push(convert(14,36,19.16,120,58,55.34));
        pts.push(convert(14,36,16.07,120,58,55.15));
        pts.push(convert(14,36,13.59,120,58,55.01));
        pts.push(convert(14,36,12.97,120,58,54.97));
        pts.push(convert(14,36,9.35,120,58,54.82));
        pts.push(convert(14,36,8.76,120,58,54.76));
        pts.push(convert(14,36,8.31,120,58,54.71));
        pts.push(convert(14,36,5.01,120,58,54.19));
        pts.push(convert(14,36,1.43,120,58,53.61));
        pts.push(convert(14,35,58.56,120,58,53.16));
        pts.push(convert(14,35,56.25,120,58,52.74));
        pts.push(convert(14,35,54.80,120,58,52.51));
        pts.push(convert(14,35,54.61,120,58,52.46));
        pts.push(convert(14,35,54.41,120,58,52.40));
        pts.push(convert(14,35,54.09,120,58,52.28));
        pts.push(convert(14,35,53.78,120,58,52.15));
        pts.push(convert(14,35,52.27,120,58,51.48));
        pts.push(convert(14,35,52.10,120,58,51.41));
        pts.push(convert(14,35,51.86,120,58,51.32));
        pts.push(convert(14,35,51.54,120,58,51.22));
        pts.push(convert(14,35,51.18,120,58,51.12));
        pts.push(convert(14,35,50.71,120,58,51.01));
        pts.push(convert(14,35,50.34,120,58,50.97));
        pts.push(convert(14,35,46.90,120,58,50.68));
        pts.push(convert(14,35,45.64,120,58,50.60));
        pts.push(convert(14,35,45.19,120,58,50.60));
        pts.push(convert(14,35,44.92,120,58,50.62));
        pts.push(convert(14,35,44.67,120,58,50.64));
        pts.push(convert(14,35,44.37,120,58,50.68));
        pts.push(convert(14,35,44.09,120,58,50.74));
        pts.push(convert(14,35,43.83,120,58,50.80));
        pts.push(convert(14,35,43.54,120,58,50.87));
        pts.push(convert(14,35,43.22,120,58,50.98));
        pts.push(convert(14,35,39.36,120,58,52.17));
        pts.push(convert(14,35,35.76,120,58,53.27));
        pts.push(convert(14,35,33.82,120,58,53.85));
        pts.push(convert(14,35,31.09,120,58,54.66));
        pts.push(convert(14,35,30.63,120,58,54.78));
        pts.push(convert(14,35,30.18,120,58,54.86));
        pts.push(convert(14,35,29.64,120,58,54.93));
        pts.push(convert(14,35,28.98,120,58,54.98));
        pts.push(convert(14,35,25.26,120,58,55.20));
        pts.push(convert(14,35,24.96,120,58,55.23));
        pts.push(convert(14,35,21.69,120,58,55.72));
        pts.push(convert(14,35,21.13,120,58,55.79));
        pts.push(convert(14,35,20.62,120,58,55.84));
        pts.push(convert(14,35,20.20,120,58,55.88));
        pts.push(convert(14,35,19.93,120,58,55.90));
        pts.push(convert(14,35,19.68,120,58,55.92));
        pts.push(convert(14,35,19.39,120,58,55.90));
        pts.push(convert(14,35,18.83,120,58,55.85));
        pts.push(convert(14,35,17.29,120,58,55.58));
        pts.push(convert(14,35,16.30,120,58,55.37));
        pts.push(convert(14,35,15.83,120,58,55.29));
        pts.push(convert(14,35,15.48,120,58,55.26));
        pts.push(convert(14,35,15.20,120,58,55.25));
        pts.push(convert(14,35,14.93,120,58,55.26));
        pts.push(convert(14,35,14.70,120,58,55.27));
        pts.push(convert(14,35,14.49,120,58,55.29));
        pts.push(convert(14,35,14.26,120,58,55.32));
        pts.push(convert(14,35,13.98,120,58,55.37));
        pts.push(convert(14,35,13.70,120,58,55.43));
        pts.push(convert(14,35,13.42,120,58,55.50));
        pts.push(convert(14,35,13.07,120,58,55.62));
        pts.push(convert(14,35,12.70,120,58,55.76));
        pts.push(convert(14,35,12.34,120,58,55.93));
        pts.push(convert(14,35,11.81,120,58,56.25));
        pts.push(convert(14,35,10.17,120,58,57.30));
        pts.push(convert(14,35,9.13,120,58,57.91));
        pts.push(convert(14,35,5.69,120,58,59.78));
        pts.push(convert(14,35,2.28,120,59,1.70));
        pts.push(convert(14,34,59.27,120,59,3.39));
        pts.push(convert(14,34,56.53,120,59,4.99));
        pts.push(convert(14,34,53.33,120,59,6.77));
        pts.push(convert(14,34,49.89,120,59,8.69));
        pts.push(convert(14,34,46.27,120,59,10.74));
        pts.push(convert(14,34,41.84,120,59,13.27));
        pts.push(convert(14,34,38.13,120,59,15.45));
        pts.push(convert(14,34,35.60,120,59,16.96));
        pts.push(convert(14,34,31.45,120,59,19.30));
        pts.push(convert(14,34,27.95,120,59,21.32));
        pts.push(convert(14,34,24.24,120,59,23.35));
        pts.push(convert(14,34,20.50,120,59,25.46));
        pts.push(convert(14,34,17.05,120,59,27.42));
        pts.push(convert(14,34,14.71,120,59,28.74));
        pts.push(convert(14,34,13.07,120,59,29.75));
        pts.push(convert(14,34,11.19,120,59,30.57));
        pts.push(convert(14,34,7.95,120,59,32.05));
        pts.push(convert(14,34,4.64,120,59,33.55));
        pts.push(convert(14,34,1.25,120,59,35.12));
        pts.push(convert(14,33,58.16,120,59,36.59));
        pts.push(convert(14,33,55.01,120,59,38.06));
        pts.push(convert(14,33,51.91,120,59,39.51));
        pts.push(convert(14,33,48.39,120,59,41.12));
        pts.push(convert(14,33,45.25,120,59,42.60));
        pts.push(convert(14,33,44.89,120,59,42.75));
        pts.push(convert(14,33,44.55,120,59,42.85));
        pts.push(convert(14,33,44.17,120,59,42.96));
        pts.push(convert(14,33,42.79,120,59,43.30));
        pts.push(convert(14,33,41.34,120,59,43.64));
        pts.push(convert(14,33,38.00,120,59,44.40));
        pts.push(convert(14,33,34.52,120,59,45.18));
        pts.push(convert(14,33,31.05,120,59,45.99));
        pts.push(convert(14,33,27.52,120,59,46.79));
        pts.push(convert(14,33,23.76,120,59,47.66));
        pts.push(convert(14,33,20.27,120,59,48.46));
        pts.push(convert(14,33,16.83,120,59,49.24));
        pts.push(convert(14,33,15.47,120,59,49.54));
        pts.push(convert(14,33,11.37,120,59,50.50));
        pts.push(convert(14,33,7.96,120,59,51.28));
        pts.push(convert(14,33,4.50,120,59,52.08));
        pts.push(convert(14,33,0.91,120,59,52.90));
        pts.push(convert(14,32,56.22,120,59,53.97));
        pts.push(convert(14,32,53.79,120,59,54.53));
        pts.push(convert(14,32,51.66,120,59,55.01));
        pts.push(convert(14,32,48.72,120,59,55.69));
        pts.push(convert(14,32,45.51,120,59,56.45));
        pts.push(convert(14,32,42.82,120,59,57.06));
        pts.push(convert(14,32,39.33,120,59,57.86));
        pts.push(convert(14,32,37.37,120,59,58.30));
        pts.push(convert(14,32,33.94,120,59,59.09));
        pts.push(convert(14,32,30.80,120,59,59.81));
        pts.push(convert(14,32,27.49,121,0,0.57));
        pts.push(convert(14,32,24.07,121,0,1.35));
        pts.push(convert(14,32,21.49,121,0,1.95));
        pts.push(convert(14,32,19.42,121,0,2.42));
        pts.push(convert(14,32,17.66,121,0,2.69));
        pts.push(convert(14,32,17.30,121,0,2.71));
        pts.push(convert(14,32,17.01,121,0,2.71));
        pts.push(convert(14,32,16.72,121,0,2.70));
        pts.push(convert(14,32,16.42,121,0,2.67));
        pts.push(convert(14,32,16.17,121,0,2.64));
        pts.push(convert(14,32,15.94,121,0,2.61));
        pts.push(convert(14,32,15.61,121,0,2.55));
        pts.push(convert(14,32,15.28,121,0,2.48));
        pts.push(convert(14,32,14.97,121,0,2.40));
        pts.push(convert(14,32,14.65,121,0,2.30));
        pts.push(convert(14,32,14.36,121,0,2.20));
        pts.push(convert(14,32,14.08,121,0,2.09));
        pts.push(convert(14,32,13.78,121,0,1.96));
        pts.push(convert(14,32,13.40,121,0,1.78));
        pts.push(convert(14,32,13.12,121,0,1.63));
        pts.push(convert(14,32,12.90,121,0,1.51));
        pts.push(convert(14,32,12.57,121,0,1.30));
        pts.push(convert(14,32,12.15,121,0,1.02));
        pts.push(convert(14,32,11.65,121,0,0.64));
        pts.push(convert(14,32,10.11,120,59,59.43));
        pts.push(convert(14,32,8.39,120,59,58.06));
        pts.push(convert(14,32,6.57,120,59,56.65));
        pts.push(convert(14,32,4.81,120,59,55.31));
        pts.push(convert(14,32,3.24,120,59,54.03));
	    this.trains.push(createPath(pts,"#FFFF00"));
	    pts.splice(0,pts.length);

		var mapOptions = {
	    center: { lat: 13, lng: 118},
	    zoom: 6,
    	zoomControl: true,
    	zoomControlOptions: {
    		// style: google.maps.ZoomControlStyle.SMALL,
	        position: google.maps.ControlPosition.RIGHT_BOTTOM
	    },
	    disableDefaultUI: true
	  };

	  this.map = new google.maps.Map(document.getElementById('map'), mapOptions);
	  this.portMarkers = [];
	  this.infowindow = new google.maps.InfoWindow({
	      content: ""
	  });
	  this.cat_vis = {};

	  for(var i = 0; i < categories.length; i++) {
	  	this.cat_vis[categories[i].id] = true;
	  }

	  for(var i = 0; i < this.ports.length; i++) {
	  	var pinIcon = new google.maps.MarkerImage(
		    categoryMarkers[this.ports[i].category_id],
		    null, /* size is determined at runtime */
		    null, /* origin is 0,0 */
		    null, /* anchor is bottom center of the scaled image */
		    new google.maps.Size(28, 46)
			);  

	  	// var iconImage = {
		  // 	url: categoryMarkers[ports[i].category_id]
		  // 	// anchor: new google.maps.Point(16,16)
		  // }

	  	var marker = new google.maps.Marker({
			  map: this.map,
			  position: getLatLng(this.ports[i]),
			  title: this.ports[i].name,
			  icon: pinIcon,//categoryMarkers[this.ports[i].category_id],//iconImage,
			  data_category: this.ports[i].category_id,
			  data_hidden: false,
			  data_id: this.ports[i].id,
			  index: i,
		    optimized: false,
			  opacity:1
			})

	  	this.portMarkers.push(marker);

			google.maps.event.addListener(marker, 'click', (function(_marker, _this) {
				return function() {
			    _this.mapUI.setActivePort(_marker.data_id);
			    _this.map.panTo(_marker.position);

			    if(_this.mapUI.mapState == "origin") {
			    	_this.mapUI.setOriginPort(_this.ports[_marker.index]);
			    }
			    if(_this.mapUI.mapState == "destination") {
			    	_this.mapUI.setDestinationPort(_this.ports[_marker.index]);
			    }

			    var string = templates["info-window"](_this.ports[_marker.index]);
			    _this.infowindow.setContent(string);
			    _this.infowindow.open(_this.map, _marker);
			  }
			})(marker, this));
	  }
	  // mapUI.setActivePort(233);
	}

	function convert(deg1, min1, sec1, deg2 ,min2, sec2){
		var lt = deg1+(min1/60)+(sec1/3600);
		var ln = deg2+(min2/60)+(sec2/3600);
		var ret = new google.maps.LatLng(lt,ln);
		// console.log(ret.lat()+" "+ret.lng());
		return ret;
	}

	function createPath(pts,cl){
		var ret = new google.maps.Polyline({
	    	path: pts,
	    	strokeColor: cl,
	    	strokeOpacity: 0.8,
	      	strokeWeight: 5.5
	    });
	    return ret;
	}
	MapDisplay.prototype.panToMarker = function(id) {
		for(var i = 0; i < this.portMarkers.length; i++) {
			if(this.portMarkers[i].data_id == id) {
				this.map.panTo(this.portMarkers[i].position);
				this.portMarkers[i].setMap(this.map);

				var string = templates["info-window"](this.ports[i]);
			  this.infowindow.setContent(string);
			  this.infowindow.open(this.map, this.portMarkers[i]);

				this.mapUI.setActivePort(id);
			}
		}
	}

	MapDisplay.prototype.toggleLayer = function(id) {
		if(this.cat_vis[id] == true) {
			this.hideLayer(id);
			if(id == train_id){
				this.hideLayer(train_id+1);
			}
			return false;
		}
		else {
			this.showLayer(id);
			if(id == train_id){
				this.showLayer(train_id+1);
			}
			return true;
		}
	}

	MapDisplay.prototype.hideLayer = function(id) {
		if(this.cat_vis[i] == false)
			return;
		this.cat_vis[id] = false;
		for(var i = 0; i < this.portMarkers.length; i++) {
			if(this.portMarkers[i].data_category == id) {
				if(this.portMarkers[i].data_hidden == false)
					this.portMarkers[i].setMap(null);
				this.portMarkers[i].data_hidden = true;
			}
		}
		if(id==4){
			for(var i=0; i<this.trains.length; i++){
				this.trains[i].setMap(null);
			}
		}
		$(".filter-image[data-category="+id+"]").toggleClass("gray", true);
	}

	MapDisplay.prototype.hideAllLayers = function() {
		for (var key in this.cat_vis) {
		  this.hideLayer(key);
		}
	}

	MapDisplay.prototype.showAllLayers = function() {
		for (var key in this.cat_vis) {
		  this.showLayer(key);
		}
	}

	MapDisplay.prototype.showLayer = function(id) {
		if(this.cat_vis[i] == true)
			return;
		this.cat_vis[id] = true;
		for(var i = 0; i < this.portMarkers.length; i++) {
			if(this.portMarkers[i].data_category == id) {
				if(this.portMarkers[i].data_hidden == true)
					this.portMarkers[i].setMap(this.map);
				this.portMarkers[i].data_hidden = false;
			}
		}
		if(id==4){
			console.log("lol");
			for(var i=0; i<this.trains.length; i++){
				this.trains[i].setMap(this.map);
			}
		}
		$(".filter-image[data-category="+id+"]").toggleClass("gray", false);
	}

	MapDisplay.prototype.showPoi = function(id) {
		for(var i = 0; i < this.portMarkers.length; i++) {
			if(this.portMarkers[i].data_id == id) {
				if(this.portMarkers[i].data_hidden == true)
					this.portMarkers[i].setMap(this.map);
				this.portMarkers[i].data_hidden = false;
				return;
			}
		}
	}

	MapDisplay.prototype.focusPorts = function(portList) {
		this.hideAllLayers();
		for(var i = 0; i < portList.length; i++) {
			this.showPoi(portList[i].id);
		}
	}

	MapDisplay.prototype.removePath = function() {
		if(this.currentPath != null) {
			this.currentPath.flightPath.setMap(null);
			for(var i = 0; i < this.currentPath.poiCircles.length; i++) {
				this.currentPath.poiCircles[i].setMap(null);
			}
		}
	}

	MapDisplay.prototype.showRoute = function(routeData) {
		this.removePath();
		if(this.currentPath == null) {
			this.currentPath = {};
		}

		var path = routeData.portPath;

		var flightPathCoordinates = [];
		for(var i = 0; i < path.length; i++) {
			flightPathCoordinates.push(getLatLng(path[i]));
		}

		this.currentPath.flightPath = new google.maps.Polyline({
	    path: flightPathCoordinates,
	    geodesic: true,
	    strokeColor: '#F16521',
	    strokeOpacity: 1.0,
	    strokeWeight: 4,
	    map: this.map
	  });

		this.currentPath.poiCircles = [];
	  for (var i = 0; i < path.length; i++) {
	  	var color = '#FFFFFF';
	  	if(i == path.length-1) {
	  		color = '#F16521';
	  	}
	    var poiOptions = {
		    path: google.maps.SymbolPath.CIRCLE,
	      strokeColor: '#F16521',
		    strokeOpacity: 1,
	      strokeWeight: 2,
	      fillColor: color,
	      fillOpacity: 1,
		    scale: 5 //pixels
		  }

	    // Add the circle for this city to the map.
	    this.currentPath.poiCircles.push(new google.maps.Marker({
			  	position: getLatLng(path[i]),
			  	icon: poiOptions,
		      optimized: false,
		      zIndex: 1,
			  	map: this.map
				})
			);
	  }

	  this.focusPorts(path);
	}
	return MapDisplay;
})();

function initializeAutocomplete() {
	var substringMatcher = function(strs) {
	  return function findMatches(q, cb) {
	    var matches, substringRegex;
	 
	    // an array that will be populated with substring matches
	    matches = [];
	 
	    // regex used to determine if a string contains the substring `q`
	    substrRegex = new RegExp(q, 'i');
	 
	    // iterate through the pool of strings and for any string that
	    // contains the substring `q`, add it to the `matches` array
	    $.each(strs, function(i, port) {
	      if (substrRegex.test(port.name)) {
	        matches.push(port);
	      }
	    });
	 
	    cb(matches);
	  };
	};

	$('#origin-text').typeahead({
	  hint: true,
	  highlight: true,
	  minLength: 1
	},
	{
	  name: 'ports',
	  source: substringMatcher(ports),
	  display: function(data) {
	  	return data.name;
	  }
	});

	$('#origin-text').bind('typeahead:select', function(ev, suggestion) {
	  mapUI.setOriginPort(suggestion);
	});

	$('#destination-text').typeahead({
	  hint: true,
	  highlight: true,
	  minLength: 1
	},
	{
	  name: 'ports',
	  source: substringMatcher(ports),
	  display: function(data) {
	  	return data.name;
	  }
	});

	$('#destination-text').bind('typeahead:select', function(ev, suggestion) {
	  mapUI.setDestinationPort(suggestion);
	});
}

function portsViewScript() {
 var ports_table = $('#points').DataTable({
    "columnDefs": [
      {
          "targets": [ 0 ],
          "visible": false,
          "searchable": true
      },
      {
          "targets": [ 5, 6 ],
          "searchable": false,
          "orderable": false
      }
    ]
  });

 	$(".delete-port").on("ajax:success", 
 		function(e, data, status, xhr) {
 			ports_table.row(function(index, _data) {
 				return (data["poi_id"] == _data[0])
 			}).remove().draw(false);

 			toastr.options = {
			  "positionClass": "toast-bottom-right"
			}
 			if(data["result"] == "ok")
 				toastr["success"](data["poi"].name + " was successfully deleted", "Deletion Successful");
 			else
 				toastr["error"]("Failed to delete " + data["poi"].name, "Deletion Failed");
 		}
 	).on("ajax:error",
 		function(e, xhr, status, error) {
			toastr.options = {
			  "positionClass": "toast-bottom-right"
			}
 			toastr["error"]("Failed to delete " + data["poi"].name, "Deletion Failed");
 		}
 	);
}



function editPortViewScript() {
	var source   = $("#additional-info-template").html();
	var form_template = Handlebars.compile(source);

	var errorCallback = function(e, xhr, status, error) {
		toastr["error"]("There is either connection issues or server issues", "Communication Error");
	};

	var editDetailCallback = function(e, data, status, xhr) {
		if(data["action"] == "delete") {
			toastr.options = {
		  "positionClass": "toast-bottom-right"
		}
		if(data["result"] == "ok") {
			toastr["success"](data["info"].name + " was successfully deleted", "Deletion Successful");
			$(e.target).parent().slideUp(500, function() {
				$(e.target).parent().remove();
			});
		}
		else
			toastr["error"]("Failed to delete " + data["info"].name, "Deletion Failed");
		}
		else {
			toastr.options = {
	  "positionClass": "toast-bottom-right"
		}
		if(data["result"] == "ok")
			toastr["success"]("Changes to " + data["info"].name + " were successfully saved", "Save Successful");
		else
			toastr["error"]("Failed to save changes to " + data["info"].name, "Save Failed");
		}
	}

	var createDetailCallback = function(e, data, status, xhr) {
		toastr.options = {
	  	"positionClass": "toast-bottom-right"
		}
		if(data["result"] == "ok") {
			toastr["success"](data["info"].name + " was successfully saved", "Save Successful");
			$(e.target).toggleClass("create-detail", false)
			$(e.target).toggleClass("edit-detail", false)
			$(e.target).attr("action", save_info_path);
			$(e.target).find("[name='details[id]']").val(data["info"].id);
			$(e.target).find("[name='commit']").val("Save Changes");
			$(e.target).find(".buttons").append("<input class=\"btn btn-default\" name=\"commit\" type=\"submit\" value=\"Delete\" onclick=\"return confirm('Delete info?')\" />");
			$(e.target).off("ajax:success");
			$(e.target).on("ajax:success", editDetailCallback);


			var string = form_template(port_data);
			$("#additional-info-list").append(string);
			$(".create-detail")
		 		.on("ajax:success", createDetailCallback)
		 		.on("ajax:error", errorCallback);
		}
		else
			toastr["error"]("Failed to save " + data["info"].name, "Save Failed");
	}

 	var editPortCallback = function(e, data, status, xhr) {
 		console.log(data);
		if(data["action"] == "delete") {
			toastr.options = { "positionClass": "toast-bottom-right" };

			if(data["result"] == "ok") {
				toastr["success"]("\"" + data["poi"].name + "\" was successfully deleted", "Deletion Successful");
			}
			else
				toastr["error"]("Failed to delete \"" + data["poi"].name + "\"", "Deletion Failed");
		}
		else if(data["action"] == "save"){
			toastr.options = { "positionClass": "toast-bottom-right" };

			if(data["result"] == "ok")
				toastr["success"]("Changes to \"" + data["poi"].name + "\" were successfully saved", "Save Successful");
			else
				toastr["error"]("Failed to save changes to \"" + data["poi"].name + "\"", "Save Failed");
		}
		else {
			toastr.options = { "positionClass": "toast-bottom-right" };

			if(data["result"] == "ok") {
				toastr["success"]("\"" + data["poi"].name + "\" was successfully saved", "Save Successful");
				$(e.target).find("[name='commit']").val("Save Changes");
				$(e.target).find("[name='poi[id]']").val(data["poi"].id);
				$("#additional-info-section").slideDown(500, function() {
					$("#additional-info-section").find("[name='details[poi_id]']").val(data["poi"].id);
				});
				port_data.id = data["poi"].id;
			}
			else
				toastr["error"]("Failed to save \"" + data["poi"].name + "\"", "Save Failed");
		}
	}

	$(".edit-detail")
 		.on("ajax:success", editDetailCallback)
 		.on("ajax:error", errorCallback);

 	$(".create-detail")
 		.on("ajax:success", createDetailCallback)
 		.on("ajax:error", errorCallback);

 	$("#edit_port")
 		.on("ajax:success", editPortCallback)
 		.on("ajax:error", errorCallback);

 	$("#category-id-select").change(function() {
 			if($(this).val() == "-1") {
 				$("#new-category").slideDown();
 			}
 			else {
 				$("#new-category").slideUp();
 			}
 	});

}

function editRouteViewScript() {
	$("#provider-id-select").change(function() {
 			if($(this).val() == "-1") {
 				$("#new-provider").slideDown();
 			}
 			else {
 				$("#new-provider").slideUp();
 			}
 	});

 	$('.day-cb').change(function() {
 		var mask = 1 << $(this).data("off");
 		var curr_days = $("#days").val();
 		
    if(this.checked)
      curr_days = curr_days | mask;
    else
    	curr_days = curr_days & (mask^127);
    $("#days").val(curr_days); 
  });

  var editRouteCallback = function(e, data, status, xhr) {
  	console.log(data);
  }

  var errorCallback = function(e, xhr, status, error) {
		toastr["error"]("There is either connection issues or server issues", "Communication Error");
	};

  $("#edit_route")
 		.on("ajax:success", editRouteCallback)
 		.on("ajax:error", errorCallback);
}

function routesViewScript() {
 var routes_table = $('#points').DataTable({
    "columnDefs": [
      {
          "targets": [ 0 ],
          "visible": false,
          "searchable": true
      },
      {
          "targets": [ 8, 9 ],
          "searchable": false,
          "orderable": false
      }
    ]
  });

 	$(".delete-port").on("ajax:success", 
 		function(e, data, status, xhr) {
 			routes_table.row(function(index, _data) {
 				return (data["route_id"] == _data[0])
 			}).remove().draw(false);

 			toastr.options = {
			  "positionClass": "toast-bottom-right"
			}
 			if(data["result"] == "ok")
 				toastr["success"](data["route"].route_id + " was successfully deleted", "Deletion Successful");
 			else
 				toastr["error"]("Failed to delete " + data["route"].route_id, "Deletion Failed");
 		}
 	).on("ajax:error",
 		function(e, xhr, status, error) {
			toastr.options = {
			  "positionClass": "toast-bottom-right"
			}
 			toastr["error"]("Failed to delete " + data["route"].route_id, "Deletion Failed");
 		}
 	);
}

function homepageScript() {
	$(".main-view").onepage_scroll({
		   sectionContainer: "section", 
		   easing: "ease",       
		   animationTime: 1000,    
		   pagination: true, 
		   loop: true, 
		   keyboard: true, 
		   responsiveFallback: false,  
		   direction: "vertical"  
		});
    
    // var input = $('input[type="text"]');
    // input.attr('size',input.attr('placeholder').length);
}

function ready() {
	if(view == "homepage") {
		homepageScript();
		return;
	}
	
	if(view === "ports") {
		portsViewScript();
		return;
	}

	if(view === "routes") {
		routesViewScript();
		return;
	}

	if(view === "edit_port") {
		editPortViewScript();
		return;
	}

	if(view === "edit_route") {
		editRouteViewScript();
		return;
	}

	if(view === "sign_in") {
		return;
	}
	
	if(view !== "export" && view !== "port_vis"){
		compileTemplates();

		mapUI = new MapUI(ports, images, infos);
		mapDisplay = new MapDisplay(ports, mapUI);
		mapUI.setMapDisplay(mapDisplay);
		mapDisplay.hideAllLayers(3);
		mapDisplay.showLayer(1);

		initializeAutocomplete();

		$(".filter-image").click(function(e) {
			var visible = mapDisplay.toggleLayer($(this).data("category"));
			// $(this).toggleClass("gray", !visible);
		});
		
		$("#panel-title").click(function() {
			mapUI.switchView("details");
		});

		$("#routes-options .section-title").click(function(e) {
			$("#routes-options-container").slideUp(400, function(c) {
				$("#routes-options .scroll-container").html("");
			});
			mapUI.showAllRoutes();
		});
	}
	
    $(function () {
	  $('[data-toggle="tooltip"]').tooltip()
	});
}

$(document).ready(ready)
$(document).on('page:load', ready)
